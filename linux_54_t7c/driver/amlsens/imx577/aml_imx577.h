// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright (c) 2023 Amlogic, Inc. All rights reserved.
 */
#include <linux/version.h>
#include <linux/clk.h>
#include <linux/delay.h>
#include <linux/gpio/consumer.h>
#include <linux/i2c.h>
#include <linux/module.h>
#include <linux/pm_runtime.h>
#include <linux/regmap.h>
#include <linux/regulator/consumer.h>
#include <media/media-entity.h>
#include <media/v4l2-ctrls.h>
#include <media/v4l2-device.h>
#include <media/v4l2-fwnode.h>
#include <media/v4l2-subdev.h>
#include <linux/of_platform.h>
#include <linux/of_graph.h>

/* Streaming Mode */
#define IMX577_REG_MODE_SELECT   0x0100
#define IMX577_MODE_STANDBY      0x00
#define IMX577_MODE_STREAMING    0x01

/* Lines per frame */
#define IMX577_REG_LPFR          0x0340

/* Chip ID */
#define IMX577_REG_ID            0x0016
#define IMX577_ID                0x577
#define IMX577_SLAVE_ID          0x1A

/* Exposure control */
#define IMX577_EXPOSURE          0x0202
#define IMX577_EXPOSURE_MIN      8
#define IMX577_EXPOSURE_OFFSET   22
#define IMX577_EXPOSURE_STEP     1
#define IMX577_EXPOSURE_DEFAULT  0x0c16

/* Analog gain control */
#define IMX577_AGAIN             0x0204
#define IMX577_AGAIN_MIN         0
#define IMX577_AGAIN_MAX         978
#define IMX577_AGAIN_STEP        1
#define IMX577_AGAIN_DEFAULT     0

/* Group hold register */
#define IMX577_REG_HOLD          0x0104

/* Input clock rate */
#define IMX577_INCLK_RATE        24000000

/* CSI2 HW configuration */
#define IMX577_LINK_FREQ         600000000
#define IMX577_NUM_DATA_LANES    4

#define IMX577_REG_MIN           0x00
#define IMX577_REG_MAX           0xffff

/**
 * struct imx577_regval - imx577 sensor register
 * @reg: Register address
 * @val: Register value
 */
struct imx577_regval {
	u16 reg;
	u8 val;
};

/**
 * struct imx577_mode - imx577 sensor mode structure
 * @width: Frame width
 * @height: Frame height
 * @code: Format code
 * @hblank: Horizontal blanking in lines
 * @vblank: Vertical blanking in lines
 * @vblank_min: Minimum vertical blanking in lines
 * @vblank_max: Maximum vertical blanking in lines
 * @pclk: Sensor pixel clock
 * @link_freq_index: Link frequency index
 * @reg_list: Register list for sensor mode
 */
struct imx577_mode {
	u32 width;
	u32 height;
	u32 code;

	u32 hblank;
	u32 vblank;
	u32 vblank_min;
	u32 vblank_max;

	u32 link_freq_index;
	u64 pclk;

	const struct imx577_regval *data;
	u32 data_size;
};


/**
 * struct imx577 - imx577 sensor device structure
 * @dev: Pointer to generic device
 * @client: Pointer to i2c client
 * @sd: V4L2 sub-device
 * @pad: Media pad. Only one pad supported
 * @reset_gpio: Sensor reset gpio
 * @inclk: Sensor input clock
 * @supplies: Regulator supplies
 * @ctrl_handler: V4L2 control handler
 * @link_freq_ctrl: Pointer to link frequency control
 * @pclk_ctrl: Pointer to pixel clock control
 * @hblank_ctrl: Pointer to horizontal blanking control
 * @vblank_ctrl: Pointer to vertical blanking control
 * @exp_ctrl: Pointer to exposure control
 * @again_ctrl: Pointer to analog gain control
 * @vblank: Vertical blanking in lines
 * @current_mode: Pointer to current selected sensor mode
 * @mutex: Mutex for serializing sensor controls
 * @streaming: Flag indicating streaming state
 */
struct imx577 {
	int index;
	struct device *dev;
	struct clk *xclk;
	struct regmap *regmap;

	u32 vblank;
	u32 enWDRMode;

	struct i2c_client *client;
	struct v4l2_subdev sd;
	struct v4l2_fwnode_endpoint ep;
	struct media_pad pad;
	struct v4l2_mbus_framefmt current_format;
	const struct imx577_mode *current_mode;

	struct sensor_gpio *gpio;

	struct v4l2_ctrl_handler ctrl_handler;
	struct v4l2_ctrl *link_freq_ctrl;
	struct v4l2_ctrl *pclk_ctrl;

	struct v4l2_ctrl *hblank_ctrl;
	struct v4l2_ctrl *vblank_ctrl;

	struct v4l2_ctrl *wdr;

	struct v4l2_ctrl *exp_ctrl;
	struct v4l2_ctrl *again_ctrl;

	struct mutex mutex;

	bool streaming;
};

static const struct regmap_config imx577_regmap_config = {
	.reg_bits = 16,
	.val_bits = 8,
	.cache_type = REGCACHE_RBTREE,
};

/* Sensor mode registers */
static const struct imx577_regval mode_4048x3040_raw10_30fps_from_vendor[] = {
	{ 0x0136, 0x18},
	{ 0x0137, 0x00},
	{ 0x3C7E, 0x01},
	{ 0x3C7F, 0x02},
	{ 0x38A8, 0x1F},
	{ 0x38A9, 0xFF},
	{ 0x38AA, 0x1F},
	{ 0x38AB, 0xFF},
	{ 0x55D4, 0x00},
	{ 0x55D5, 0x00},
	{ 0x55D6, 0x07},
	{ 0x55D7, 0xFF},
	{ 0x55E8, 0x07},
	{ 0x55E9, 0xFF},
	{ 0x55EA, 0x00},
	{ 0x55EB, 0x00},
	{ 0x575C, 0x07},
	{ 0x575D, 0xFF},
	{ 0x575E, 0x00},
	{ 0x575F, 0x00},
	{ 0x5764, 0x00},
	{ 0x5765, 0x00},
	{ 0x5766, 0x07},
	{ 0x5767, 0xFF},
	{ 0x5974, 0x04},
	{ 0x5975, 0x01},
	{ 0x5F10, 0x09},
	{ 0x5F11, 0x92},
	{ 0x5F12, 0x32},
	{ 0x5F13, 0x72},
	{ 0x5F14, 0x16},
	{ 0x5F15, 0xBA},
	{ 0x5F17, 0x13},
	{ 0x5F18, 0x24},
	{ 0x5F19, 0x60},
	{ 0x5F1A, 0xE3},
	{ 0x5F1B, 0xAD},
	{ 0x5F1C, 0x74},
	{ 0x5F2D, 0x25},
	{ 0x5F5C, 0xD0},
	{ 0x6A22, 0x00},
	{ 0x6A23, 0x1D},
	{ 0x7BA8, 0x00},
	{ 0x7BA9, 0x00},
	{ 0x886B, 0x00},
	{ 0x9002, 0x0A},
	{ 0x9004, 0x1A},
	{ 0x9214, 0x93},
	{ 0x9215, 0x69},
	{ 0x9216, 0x93},
	{ 0x9217, 0x6B},
	{ 0x9218, 0x93},
	{ 0x9219, 0x6D},
	{ 0x921A, 0x57},
	{ 0x921B, 0x58},
	{ 0x921C, 0x57},
	{ 0x921D, 0x59},
	{ 0x921E, 0x57},
	{ 0x921F, 0x5A},
	{ 0x9220, 0x57},
	{ 0x9221, 0x5B},
	{ 0x9222, 0x93},
	{ 0x9223, 0x02},
	{ 0x9224, 0x93},
	{ 0x9225, 0x03},
	{ 0x9226, 0x93},
	{ 0x9227, 0x04},
	{ 0x9228, 0x93},
	{ 0x9229, 0x05},
	{ 0x922A, 0x98},
	{ 0x922B, 0x21},
	{ 0x922C, 0xB2},
	{ 0x922D, 0xDB},
	{ 0x922E, 0xB2},
	{ 0x922F, 0xDC},
	{ 0x9230, 0xB2},
	{ 0x9231, 0xDD},
	{ 0x9232, 0xB2},
	{ 0x9233, 0xE1},
	{ 0x9234, 0xB2},
	{ 0x9235, 0xE2},
	{ 0x9236, 0xB2},
	{ 0x9237, 0xE3},
	{ 0x9238, 0xB7},
	{ 0x9239, 0xB9},
	{ 0x923A, 0xB7},
	{ 0x923B, 0xBB},
	{ 0x923C, 0xB7},
	{ 0x923D, 0xBC},
	{ 0x923E, 0xB7},
	{ 0x923F, 0xC5},
	{ 0x9240, 0xB7},
	{ 0x9241, 0xC7},
	{ 0x9242, 0xB7},
	{ 0x9243, 0xC9},
	{ 0x9244, 0x98},
	{ 0x9245, 0x56},
	{ 0x9246, 0x98},
	{ 0x9247, 0x55},
	{ 0x9380, 0x00},
	{ 0x9381, 0x62},
	{ 0x9382, 0x00},
	{ 0x9383, 0x56},
	{ 0x9384, 0x00},
	{ 0x9385, 0x52},
	{ 0x9388, 0x00},
	{ 0x9389, 0x55},
	{ 0x938A, 0x00},
	{ 0x938B, 0x55},
	{ 0x938C, 0x00},
	{ 0x938D, 0x41},
	{ 0x5078, 0x01},
	{ 0x0112, 0x0A},
	{ 0x0113, 0x0A},
	{ 0x0114, 0x03},
	{ 0x0342, 0x23},
	{ 0x0343, 0x18},
	{ 0x0340, 0x0C},
	{ 0x0341, 0x2C},
	{ 0x3210, 0x00},
	{ 0x0344, 0x00},
	{ 0x0345, 0x00},
	{ 0x0346, 0x00},
	{ 0x0347, 0x00},
	{ 0x0348, 0x0F},
	{ 0x0349, 0xD7},
	{ 0x034A, 0x0B},
	{ 0x034B, 0xDF},
	{ 0x00E3, 0x00},
	{ 0x00E4, 0x00},
	{ 0x00E5, 0x00},
	{ 0x00FC, 0x0A},
	{ 0x00FD, 0x0A},
	{ 0x00FE, 0x0A},
	{ 0x00FF, 0x0A},
	{ 0xE013, 0x00},
	{ 0x0220, 0x00},
	{ 0x0221, 0x11},
	{ 0x0381, 0x01},
	{ 0x0383, 0x01},
	{ 0x0385, 0x01},
	{ 0x0387, 0x01},
	{ 0x0900, 0x00},
	{ 0x0901, 0x11},
	{ 0x0902, 0x00},
	{ 0x3140, 0x02},
	{ 0x3241, 0x11},
	{ 0x3250, 0x03},
	{ 0x3E10, 0x00},
	{ 0x3E11, 0x00},
	{ 0x3F0D, 0x00},
	{ 0x3F42, 0x00},
	{ 0x3F43, 0x00},
	{ 0x0401, 0x00},
	{ 0x0404, 0x00},
	{ 0x0405, 0x10},
	{ 0x0408, 0x00},
	{ 0x0409, 0x00},
	{ 0x040A, 0x00},
	{ 0x040B, 0x00},
	{ 0x040C, 0x0F},
	{ 0x040D, 0xD0},
	{ 0x040E, 0x0B},
	{ 0x040F, 0xE0},
	{ 0x034C, 0x0F},
	{ 0x034D, 0xD0},
	{ 0x034E, 0x0B},
	{ 0x034F, 0xE0},
	{ 0x0301, 0x05},
	{ 0x0303, 0x02},
	{ 0x0305, 0x04},
	{ 0x0306, 0x01},
	{ 0x0307, 0x5E},
	{ 0x0309, 0x0A},
	{ 0x030B, 0x02},
	{ 0x030D, 0x02},
	{ 0x030E, 0x00},
	{ 0x030F, 0xA6},
	{ 0x0310, 0x01},
	{ 0x0820, 0x0F},
	{ 0x0821, 0x90},
	{ 0x0822, 0x00},
	{ 0x0823, 0x00},
	{ 0x3E20, 0x01},
	{ 0x3E37, 0x00},
	{ 0x3F50, 0x00},
	{ 0x3F56, 0x00},
	{ 0x3F57, 0x82},
	{ 0x3C0A, 0x5A},
	{ 0x3C0B, 0x55},
	{ 0x3C0C, 0x28},
	{ 0x3C0D, 0x07},
	{ 0x3C0E, 0xFF},
	{ 0x3C0F, 0x00},
	{ 0x3C10, 0x00},
	{ 0x3C11, 0x02},
	{ 0x3C12, 0x00},
	{ 0x3C13, 0x03},
	{ 0x3C14, 0x00},
	{ 0x3C15, 0x00},
	{ 0x3C16, 0x0C},
	{ 0x3C17, 0x0C},
	{ 0x3C18, 0x0C},
	{ 0x3C19, 0x0A},
	{ 0x3C1A, 0x0A},
	{ 0x3C1B, 0x0A},
	{ 0x3C1C, 0x00},
	{ 0x3C1D, 0x00},
	{ 0x3C1E, 0x00},
	{ 0x3C1F, 0x00},
	{ 0x3C20, 0x00},
	{ 0x3C21, 0x00},
	{ 0x3C22, 0x3F},
	{ 0x3C23, 0x0A},
	{ 0x3E35, 0x01},
	{ 0x3F4A, 0x03},
	{ 0x3F4B, 0xBF},
	{ 0x3F26, 0x00},
	{ 0x0202, 0x0C},
	{ 0x0203, 0x16},
	{ 0x0204, 0x00},
	{ 0x0205, 0x00},
	{ 0x020E, 0x01},
	{ 0x020F, 0x00},
	{ 0x0210, 0x01},
	{ 0x0211, 0x00},
	{ 0x0212, 0x01},
	{ 0x0213, 0x00},
	{ 0x0214, 0x01},
	{ 0x0215, 0x00}
};

extern int imx577_init(struct i2c_client *client, void *sdrv);
extern int imx577_deinit(struct i2c_client *client);
extern int imx577_sensor_id(struct i2c_client *client);
extern int imx577_power_on(struct device *dev, struct sensor_gpio *gpio);
extern int imx577_power_off(struct device *dev, struct sensor_gpio *gpio);
extern int imx577_power_suspend(struct device *dev);
extern int imx577_power_resume(struct device *dev);
