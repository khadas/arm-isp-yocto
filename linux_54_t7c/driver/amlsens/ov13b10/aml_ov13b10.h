// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright (c) 2023 Amlogic, Inc. All rights reserved.
 */
#include <linux/version.h>
#include <linux/clk.h>
#include <linux/delay.h>
#include <linux/gpio/consumer.h>
#include <linux/i2c.h>
#include <linux/module.h>
#include <linux/pm_runtime.h>
#include <linux/regmap.h>
#include <linux/regulator/consumer.h>
#include <media/media-entity.h>
#include <media/v4l2-ctrls.h>
#include <media/v4l2-device.h>
#include <media/v4l2-fwnode.h>
#include <media/v4l2-subdev.h>
#include <linux/of_platform.h>
#include <linux/of_graph.h>

#define OV13B10_GAIN         0x3508
#define OV13B10_GAIN_L       0x3509
#define OV13B10_EXPOSURE     0x3501
#define OV13B10_EXPOSURE_L   0x3502
#define OV13B10_ID           0x763d72
#define OV13B10_ID_2         0x763d73
#define OV13B10_SLAVE_ID     0x0036
#define OV13B10_SLAVE_ID1    0x0010

struct ov13b10_regval {
	u16 reg;
	u8 val;
};

struct ov13b10_mode {
	u32 width;
	u32 height;
	u32 hmax;
	u32 link_freq_index;

	const struct ov13b10_regval *data;
	u32 data_size;
};

struct ov13b10 {
	int index;
	struct device *dev;
	struct clk *xclk;
	struct regmap *regmap;
	u8 nlanes;
	u8 bpp;
	u32 enWDRMode;
	u8 i2c_addr;

	struct i2c_client *client;
	struct v4l2_subdev sd;
	struct v4l2_fwnode_endpoint ep;
	struct media_pad pad;
	struct v4l2_mbus_framefmt current_format;
	const struct ov13b10_mode *current_mode;

	struct sensor_gpio *gpio;

	struct v4l2_ctrl_handler ctrls;
	struct v4l2_ctrl *link_freq;
	struct v4l2_ctrl *pixel_rate;
	struct v4l2_ctrl *wdr;
	struct v4l2_ctrl *address;
	struct v4l2_ctrl *data_lanes;

	int status;
	struct mutex lock;
};

struct ov13b10_pixfmt {
	u32 code;
	u32 min_width;
	u32 max_width;
	u32 min_height;
	u32 max_height;
	u8 bpp;
};

static const struct ov13b10_pixfmt ov13b10_formats[] = {
	{ MEDIA_BUS_FMT_SBGGR10_1X10, 720, 4208, 720, 3120, 10 },
	{ MEDIA_BUS_FMT_SBGGR12_1X12, 1280, 4208, 720, 3120, 12 },
};

static const struct regmap_config ov13b10_regmap_config = {
	.reg_bits = 16,
	.val_bits = 8,
	.cache_type = REGCACHE_RBTREE,
};

static const u8 ov13b10_i2c_address[2] = {
	0x10,
	0x36,
};

static const struct ov13b10_regval setting_4208_3120_4lane_1080m_30fps[] = {
	{0x0103, 0x01},
	{0x0303, 0x01},
	{0x0305, 0x46},
	{0x0321, 0x00},
	{0x0323, 0x04},
	{0x0324, 0x01},
	{0x0325, 0x50},
	{0x0326, 0x81},
	{0x0327, 0x05},
	{0x3011, 0x7c},
	{0x3012, 0x07},
	{0x3013, 0x32},
	{0x3107, 0x23},
	{0x3501, 0x03},
	{0x3502, 0xd2},
	{0x3504, 0x08},
	{0x3508, 0x00},
	{0x3509, 0x80},
	{0x3600, 0x16},
	{0x3601, 0x54},
	{0x3612, 0x4e},
	{0x3620, 0x00},
	{0x3621, 0x28},
	{0x3622, 0xe6},
	{0x3623, 0x00},
	{0x3662, 0x92},
	{0x3666, 0xbb},
	{0x3667, 0x44},
	{0x366e, 0xff},
	{0x366f, 0xf3},
	{0x3675, 0x44},
	{0x3676, 0x00},
	{0x367f, 0xe9},
	{0x3681, 0x32},
	{0x3682, 0x1f},
	{0x3683, 0x0b},
	{0x3684, 0x0b},
	{0x3704, 0x0f},
	{0x3706, 0x40},
	{0x3708, 0x3b},
	{0x3709, 0x72},
	{0x370b, 0xa2},
	{0x3714, 0x24},
	{0x371a, 0x3e},
	{0x3725, 0x42},
	{0x3739, 0x12},
	{0x3767, 0x00},
	{0x3774, 0x30},
	{0x377a, 0x0d},
	{0x3789, 0x18},
	{0x3790, 0x40},
	{0x3791, 0xa2},
	{0x37c2, 0x04},
	{0x37c3, 0xf1},
	{0x37d9, 0x0c},
	{0x37da, 0x02},
	{0x37dc, 0x02},
	{0x37e1, 0x04},
	{0x37e2, 0x0a},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x08},
	{0x3804, 0x10},
	{0x3805, 0x8f},
	{0x3806, 0x0c},
	{0x3807, 0x47},
	{0x3808, 0x10},
	{0x3809, 0x70},
	{0x380a, 0x0c},
	{0x380b, 0x30},
	{0x380c, 0x04},
	{0x380d, 0x98},
	{0x380e, 0x0c},
	{0x380f, 0xc0},
	{0x3811, 0x0f},
	{0x3813, 0x08},
	{0x3814, 0x01},
	{0x3815, 0x01},
	{0x3816, 0x01},
	{0x3817, 0x01},
	{0x381f, 0x08},
	{0x3820, 0x88},
	{0x3821, 0x00},
	{0x3822, 0x14},
	{0x3823, 0x18},
	{0x3827, 0x01},
	{0x382e, 0xe6},
	{0x3c80, 0x00},
	{0x3c87, 0x01},
	{0x3c8c, 0x19},
	{0x3c8d, 0x1c},
	{0x3ca0, 0x00},
	{0x3ca1, 0x00},
	{0x3ca2, 0x00},
	{0x3ca3, 0x00},
	{0x3ca4, 0x50},
	{0x3ca5, 0x11},
	{0x3ca6, 0x01},
	{0x3ca7, 0x00},
	{0x3ca8, 0x00},
	{0x3f02, 0x2a},
	{0x3f03, 0x10},
	{0x4008, 0x02},
	{0x4009, 0x0f},
	{0x400a, 0x01},
	{0x400b, 0x19},
	{0x4011, 0x21},
	{0x4017, 0x08},
	{0x4019, 0x04},
	{0x401a, 0x58},
	{0x4032, 0x1e},
	{0x4050, 0x02},
	{0x4051, 0x09},
	{0x405e, 0x00},
	{0x4066, 0x02},
	{0x4501, 0x00},
	{0x4502, 0x10},
	{0x4505, 0x00},
	{0x4800, 0x64},
	{0x481b, 0x3e},
	{0x481f, 0x30},
	{0x4825, 0x34},
	{0x4837, 0x0e},
	{0x484b, 0x01},
	{0x4883, 0x02},
	{0x5000, 0xfd},
	{0x5001, 0x0d},
	{0x5045, 0x20},
	{0x5046, 0x20},
	{0x5047, 0xa4},
	{0x5048, 0x20},
	{0x5049, 0xa4},
	{0x0100, 0x01},
};

static const struct ov13b10_regval ov13b10_1080p_settings[] = {

};

static const struct ov13b10_regval ov13b10_720p_settings[] = {

};

static const struct ov13b10_regval ov13b10_10bit_settings[] = {

};

static const struct ov13b10_regval ov13b10_12bit_settings[] = {

};

extern int ov13b10_init(struct i2c_client *client, void *sdrv);
extern int ov13b10_deinit(struct i2c_client *client);
extern int ov13b10_sensor_id(struct i2c_client *client);
extern int ov13b10_power_on(struct device *dev, struct sensor_gpio *gpio);
extern int ov13b10_power_off(struct device *dev, struct sensor_gpio *gpio);
extern int ov13b10_power_suspend(struct device *dev);
extern int ov13b10_power_resume(struct device *dev);
